/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface GetArtistSchema
 */
export interface GetArtistSchema {
    /**
     * 
     * @type {number}
     * @memberof GetArtistSchema
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof GetArtistSchema
     */
    'name': string | null;
    /**
     * 
     * @type {string}
     * @memberof GetArtistSchema
     */
    'cover_url': string | null;
}
/**
 * 
 * @export
 * @interface GetPeakSchema
 */
export interface GetPeakSchema {
    /**
     * 
     * @type {string}
     * @memberof GetPeakSchema
     */
    'track_id': string;
    /**
     * 
     * @type {string}
     * @memberof GetPeakSchema
     */
    'download_url': string;
}
/**
 * 
 * @export
 * @interface GetTrackSchema
 */
export interface GetTrackSchema {
    /**
     * 
     * @type {string}
     * @memberof GetTrackSchema
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetTrackSchema
     */
    'title': string | null;
    /**
     * 
     * @type {Array<GetArtistSchema>}
     * @memberof GetTrackSchema
     */
    'artists': Array<GetArtistSchema>;
    /**
     * 
     * @type {string}
     * @memberof GetTrackSchema
     */
    'cover_url': string | null;
}
/**
 * 
 * @export
 * @interface GetTracksListSchema
 */
export interface GetTracksListSchema {
    /**
     * 
     * @type {number}
     * @memberof GetTracksListSchema
     */
    'count': number;
    /**
     * 
     * @type {Array<GetTrackSchema>}
     * @memberof GetTracksListSchema
     */
    'tracks': Array<GetTrackSchema>;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Favourite Tracks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavouriteTracksTracksFavouritesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tracks/favourites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Peak
         * @param {string} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeakPeaksTrackIdGet: async (trackId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackId' is not null or undefined
            assertParamExists('getPeakPeaksTrackIdGet', 'trackId', trackId)
            const localVarPath = `/peaks/{track_id}`
                .replace(`{${"track_id"}}`, encodeURIComponent(String(trackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Similar Tracks
         * @param {string} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarTracksTracksTrackIdSimilarGet: async (trackId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackId' is not null or undefined
            assertParamExists('getSimilarTracksTracksTrackIdSimilarGet', 'trackId', trackId)
            const localVarPath = `/tracks/{track_id}/similar`
                .replace(`{${"track_id"}}`, encodeURIComponent(String(trackId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Favourite Tracks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFavouriteTracksTracksFavouritesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTracksListSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFavouriteTracksTracksFavouritesGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getFavouriteTracksTracksFavouritesGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Peak
         * @param {string} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPeakPeaksTrackIdGet(trackId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPeakSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPeakPeaksTrackIdGet(trackId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getPeakPeaksTrackIdGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get Similar Tracks
         * @param {string} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSimilarTracksTracksTrackIdSimilarGet(trackId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTracksListSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSimilarTracksTracksTrackIdSimilarGet(trackId, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.getSimilarTracksTracksTrackIdSimilarGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Favourite Tracks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFavouriteTracksTracksFavouritesGet(options?: any): AxiosPromise<GetTracksListSchema> {
            return localVarFp.getFavouriteTracksTracksFavouritesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Peak
         * @param {string} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeakPeaksTrackIdGet(trackId: string, options?: any): AxiosPromise<GetPeakSchema> {
            return localVarFp.getPeakPeaksTrackIdGet(trackId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Similar Tracks
         * @param {string} trackId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSimilarTracksTracksTrackIdSimilarGet(trackId: string, options?: any): AxiosPromise<GetTracksListSchema> {
            return localVarFp.getSimilarTracksTracksTrackIdSimilarGet(trackId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get Favourite Tracks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getFavouriteTracksTracksFavouritesGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getFavouriteTracksTracksFavouritesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Peak
     * @param {string} trackId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPeakPeaksTrackIdGet(trackId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPeakPeaksTrackIdGet(trackId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Similar Tracks
     * @param {string} trackId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSimilarTracksTracksTrackIdSimilarGet(trackId: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getSimilarTracksTracksTrackIdSimilarGet(trackId, options).then((request) => request(this.axios, this.basePath));
    }
}



